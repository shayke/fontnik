#!/usr/bin/env node

const assert = require('assert');
const fs = require('fs');
const program = require('commander');
const opentype = require('opentype.js');
const sdf = require('../lib/sdf').glyphToSDF;
const potpack = require('potpack');
const pkg = require('../package.json');

program
    .version(pkg.version)
    .usage('[options] <font.ttf>')
    .option('--min [min]', 'Minimum char code to generate', 0x20)
    .option('--max [max]', 'Maximum char code to generate inclusive', 0x21F)
    .parse(process.argv);

var fontSize = 24;
var buffer = 3;
var cutoff = 2 / 8;

var fonts = program.args;
if (!fonts.length) {
    program.outputHelp();
    process.exit(1);
}

var font = opentype.loadSync(fonts[0]);
if (!font.supported) {
    console.warn(fonts[0] + ' is not supported.');
    process.exit(1);
}

createGlyphs(+program.min, +program.max);

function copyData(srcImg, dstImg, srcPt, dstPt, size, channels) {
    if (size.width === 0 || size.height === 0) {
        return dstImg;
    }

    if (size.width > srcImg.width ||
        size.height > srcImg.height ||
        srcPt.x > srcImg.width - size.width ||
        srcPt.y > srcImg.height - size.height) {
        throw new RangeError('out of range source coordinates for image copy');
    }

    if (size.width > dstImg.width ||
        size.height > dstImg.height ||
        dstPt.x > dstImg.width - size.width ||
        dstPt.y > dstImg.height - size.height) {
        throw new RangeError('out of range destination coordinates for image copy');
    }

    const srcData = srcImg.data;
    const dstData = dstImg.data;

    assert(srcData !== dstData);

    for (let y = 0; y < size.height; y++) {
        const srcOffset = ((srcPt.y + y) * srcImg.width + srcPt.x) * channels;
        const dstOffset = ((dstPt.y + y) * dstImg.width + dstPt.x) * channels;
        for (let i = 0; i < size.width * channels; i++) {
            dstData[dstOffset + i] = srcData[srcOffset + i];
        }
    }

    return dstImg;
}

function createGlyphs(from, to) {
    console.warn(`Generating glyphs range ${from}-${to}`);

    const padding = 1.0;

    const json = {
        size: fontSize,
        width: 0,
        height: 0,
        glyphs: {}
    };
    const positions = [];
    const bins = [];
    for (var chr = from; chr <= to; chr++) {
        var glyph = font.charToGlyph(String.fromCharCode(chr));
        if (glyph.index > 0) {
            var info = sdf(font, glyph, fontSize, buffer, cutoff);
            let bin;
            if (info.data && info.width && info.height) {
                bin = {
                    x: 0,
                    y: 0,
                    w: (info.glyphWidth + 2 * buffer) + 2 * padding,
                    h: (info.glyphHeight + 2 * buffer) + 2 * padding
                };
                bins.push(bin);
            }

            positions.push({
                char: chr,
                rect: bin,
                left: info.glyphBearingX,
                top: info.glyphTop,
                advance: info.glyphAdvance,
                data: info.data
            });
        }
    }

    const { w, h } = potpack(bins);
    json.width = w;
    json.height = h;

    const binaryData = new Uint8Array(w * h);
    for (const pos of positions) {
        const rect = pos.rect;
        json.glyphs[pos.char] = {
            rect,
            left: pos.left,
            top: pos.top,
            advance: pos.advance
        }

        if (pos.data) {
            const srcImg = { width: rect.w - 2 * padding, height: rect.h - 2 * padding, data: pos.data };
            const dstImg = { width: w, height: h, data: binaryData };
            copyData(srcImg, dstImg, {x: 0, y: 0}, {x: rect.x + padding, y: rect.y + padding}, srcImg, 1);
        }
    }

    let data = JSON.stringify(json, null);
    fs.writeFileSync('open-sans.json', data);
    fs.writeFileSync('open-sans.sdf',new Buffer(binaryData));
}